{
  "name": "pcm-utils",
  "description": "PCM audio utilities for Node.js",
  "keywords": [
    "audio",
    "sound",
    "pcm"
  ],
  "version": "0.0.2",
  "author": {
    "name": "Greg Thornton",
    "email": "evandro@me.com",
    "url": "http://evandro.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/evandro/node-pcm-utils",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/evandro/node-pcm-utils.git"
  },
  "bugs": {
    "url": "https://github.com/evandro/node-pcm-utils/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "coffee-script": ">= 1.6.2"
  },
  "scripts": {
    "prepublish": "coffee -cbo lib src",
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-pcm-utils\n==============\n\n[![NPM version](https://badge.fury.io/js/pcm-utils.png)](http://badge.fury.io/js/pcm-utils)\n\nPCM audio utilities for Node.js\n\n\nFeatures\n--------\n\n* **Interleaving/deinterleaving** - Unzip interleaved PCM data into separate channel streams and vice-versa.\n\n* **Mixing** - Mix 2 or more PCM channels into one.\n\n* **Format conversion** - Transform a stream from one PCM format to another (ie. float to int).\n\n* **Evented** - Doesn't block the main loop, thanks to [`uv_queue_work`](http://nikhilm.github.io/uvbook/threads.html#libuv-work-queue).\n\n* **Streams2 compatible** - Everything's just a pipeable [stream](http://nodejs.org/api/stream.html).\n\nNote: For sample rate conversion, check out [resampler](https://npmjs.org/package/resampler). For playback, try [speaker](https://npmjs.org/package/speaker) or [alsa](https://npmjs.org/package/alsa) (which also records).\n\n\nInstallation\n------------\n\nInstall with npm:\n\n```sh\n$ npm install pcm-utils\n```\n\nor via git:\n\n```sh\n$ npm install git+https://github.com/xdissent/node-pcm-utils.git\n```\n\n\nUsage\n-----\n\n```js\nvar pcmUtils = require('pcm-utils'),\n\n  // The following variables represent the defaults for all constructors.\n  channels = 2,                // 2 channels (left/right)\n  format = pcmUtils.FMT_F32LE, // 32 bit little-endian float\n\n  // Available formats: No big-endian support yet!\n  //\n  // pcmUtils.FMT_F32LE - 32 bit little-endian float\n  // pcmUtils.FMT_F32BE - 32 bit big-endian float **Not currently supported**\n  // pcmUtils.FMT_S16LE - signed 16 bit little-endian integer\n  // pcmUtils.FMT_S16BE - signed 16 bit big-endian integer **Not currently supported**\n  // pcmUtils.FMT_U16LE - unsigned 16 bit little-endian integer\n  // pcmUtils.FMT_U16BE - unsigned 16 bit big-endian integer **Not currently supported**\n\n  // Unzipper deinterleaves PCM data into multiple single-channel streams.\n  unzipper = new pcmUtils.Unzipper(channels, format),\n\n  // Zipper interleaves multiple single-channel PCM streams into one.\n  zipper = new pcmUtils.Zipper(channels, format),\n  \n  // Mixer mixes multiple channels into a single channel stream.\n  mixer = new pcmUtils.Mixer(channels, format),\n  \n  // Formatter transforms single-channel PCM data from one format to another,\n  // 32 bit little-endian float to signed 16 bit little-endian integer in this case.\n  formatter = new pcmUtils.Formatter(format, pcmUtils.FMT_S16LE);\n\n// Read interleaved PCM data from stdin\nprocess.stdin.pipe(unzipper);\n\n// Unzip (de-interleave) it then zip it right back up to stdout\nunzipper.left.pipe(zipper.left);    // or `unzipper.outputs[0].pipe(zipper.inputs[0]);`\nunzipper.right.pipe(zipper.right);  // or `unzipper.outputs[1].pipe(zipper.inputs[1]);`\nzipper.pipe(process.stdout);\n\n// Mix left and right channels and pipe mono to stderr\nunzipper.left.pipe(mixer.left);     // or `unzipper.outputs[0].pipe(mixer.inputs[0]);`\nunzipper.right.pipe(mixer.right);   // or `unzipper.outputs[1].pipe(mixer.inputs[1]);`\nmixer.pipe(process.stderr);\n\n// Convert the mono mixer output into signed 16 bit little-endian and write to file.\nvar fs = require('fs'),\n  outFileStream = fs.createWriteStream('/tmp/s16le.pcm');\nformatter.pipe(outFileStream);\nmixer.pipe(formatter);\n```\n",
  "readmeFilename": "README.md",
  "_id": "pcm-utils@0.0.2",
  "_shasum": "03b9281c99c22055c780da7f150b95e9b4b4ae67",
  "_resolved": "git://github.com/evandrododo/node-pcm-utils#65398b7a50cbe71f90d4841d15f315717e785be5",
  "_from": "git://github.com/evandrododo/node-pcm-utils"
}
